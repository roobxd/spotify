// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// schema.prisma

// Define the data source and generator
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Playlist {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?
  tracks      PlaylistTrack[]
}

model Track {
  id         String   @id @default(uuid()) @db.Uuid
  title      String
  duration   Int      
  albumId    String?  @db.Uuid
  album      Album?   @relation(fields: [albumId], references: [id])
  artists    TrackArtist[]
  playlists  PlaylistTrack[]
}

model Album {
  id         String   @id @default(uuid()) @db.Uuid
  title      String
  releaseDate DateTime
  artistId   String   @db.Uuid
  artist     Artist   @relation(fields: [artistId], references: [id])
  tracks     Track[]
}

model Artist {
  id      String   @id @default(uuid()) @db.Uuid
  name    String
  albums  Album[]
  tracks  TrackArtist[]
}

model PlaylistTrack {
  id         String   @id @default(uuid()) @db.Uuid
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  playlistId String   @db.Uuid
  track      Track    @relation(fields: [trackId], references: [id])
  trackId    String   @db.Uuid
  order      Int      
}

model TrackArtist {
  id        String   @id @default(uuid()) @db.Uuid
  track     Track    @relation(fields: [trackId], references: [id])
  trackId   String   @db.Uuid
  artist    Artist   @relation(fields: [artistId], references: [id])
  artistId  String   @db.Uuid
}
